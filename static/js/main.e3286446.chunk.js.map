{"version":3,"sources":["AboutUs.js","Help.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","AboutUs","style","display","justifyContent","alignContent","delay","map","name","index","key","level","Layout","Header","Content","Footer","Sider","Select","Option","Audio","marginTop","App","useState","current","setCurrent","breakpoint","collapsedWidth","width","background","theme","mode","defaultSelectedKeys","padding","height","onClick","e","className","src","Item","icon","AmazonOutlined","UserOutlined","QuestionOutlined","frameBorder","allow","textAlign","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gXAuBQA,EAAUC,IAAVD,MAEO,SAASE,IAmBtB,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,aAAc,WAGhB,6BACA,kBAACN,EAAD,qCACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEO,MAAO,IACPJ,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,aAAc,WAlCR,CACZ,uBACA,iBACA,kBACA,cACA,mBACA,qBACA,sBACA,cACA,iBACA,eACA,aACA,aACA,mBACA,cACA,oBACA,gBAqBWE,KAAI,SAACC,EAAMC,GAChB,OACE,yBAAKC,IAAKD,GACR,kBAACV,EAAD,CAAOY,MAAO,GAAd,IAAmBH,S,YC3CUI,IAAnCC,OAAmCD,IAA3BE,QAA2BF,IAAlBG,OAAkBH,IAAVI,MAEdC,IAAXC,OACUlB,IAAVD,MAEO,SAASoB,IACtB,OACE,oCACI,kBAAC,IAAD,CAAOjB,MAAO,CAACkB,UAAU,UCjBUR,IAAnCC,OAAR,IAAgBC,EAA2BF,IAA3BE,QAASC,EAAkBH,IAAlBG,OAAQC,EAAUJ,IAAVI,MACdC,IAAXC,OACUlB,IAAVD,MAEO,SAASsB,IACtB,MAA8BC,mBAAS,UAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEC,WAAW,KACXC,eAAe,IACfC,MAAM,MACNzB,MAAO,CAAE0B,WAAY,SAErB,kBAAC,IAAD,CACEC,MAAM,QACNC,KAAK,SACLC,oBAAqB,CAAC,UACtB7B,MAAO,CAAE8B,QAAS,KAAMC,OAAQ,QAChCC,QAjBU,SAACC,GACnBX,EAAWW,EAAEzB,OAkBL,yBAAK0B,UAAU,QACb,yBAAKC,IAAI,2FAEX,kBAAC,IAAD,MACA,kBAAC,IAAKC,KAAN,CAAW5B,IAAI,SAAS6B,KAAM,kBAACC,EAAA,EAAD,OAA9B,eAGA,kBAAC,IAAKF,KAAN,CAAW5B,IAAI,UAAU6B,KAAM,kBAACE,EAAA,EAAD,OAA/B,YAGA,kBAAC,IAAKH,KAAN,CAAW5B,IAAI,OAAO6B,KAAM,kBAACG,EAAA,EAAD,OAA5B,UAKJ,kBAAC,IAAD,CAAQxC,MAAO,CAAC+B,OAAO,UACrB,kBAAC,EAAD,CAAS/B,MAAO,CAAE0B,WAAY,SACf,WAAZL,EACC,4BACEoB,YAAY,IACZN,IAAI,yBACJO,MAAM,oBACN1C,MAAO,CAAEyB,MAAO,OAAQM,OAAQ,UAEpB,SAAZV,EACF,kBAAC,EAAD,MACC,kBAACtB,EAAD,OAEL,kBAAC,EAAD,CAAQC,MAAO,CAAE2C,UAAW,SAAUC,UAAW,UAC/C,yCADF,6CCxDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3286446.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  DatePicker,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n  Rate,\r\n  Typography,\r\n  Space,\r\n  Divider,\r\n} from \"antd\";\r\nimport \"./App.less\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport {\r\n  UploadOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n} from \"@ant-design/icons\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function AboutUs() {\r\n  const Names = [\r\n    \"Koehne, Christopher,\",\r\n    \"Razzaq, Bassam\",\r\n    \"Perille, Daniel\",\r\n    \"Shieh, John\",\r\n    \"Roberts, Armisha\",\r\n    \"Templeton, Sabrina\",\r\n    \"Reddygari, Praneeth\",\r\n    \"Nawab, John\",\r\n    \"Momin, Sarosha\",\r\n    \"Quadri, Isra\",\r\n    \"Joshi, Ian\",\r\n    \"Ivy, Aidan\",\r\n    \"DeLouise, Alyssa\",\r\n    \"Chen, Ethan\",\r\n    \"Getmanchuk, Alice\",\r\n    \"Dutt, Nikhil\",\r\n  ];\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n      }}\r\n    >\r\n      <br/>\r\n      <Title>The Bestest Microsoft Edgies</Title>\r\n      <Divider />\r\n      <QueueAnim\r\n        delay={300}\r\n        style={{\r\n          display: \"grid\",\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n        }}\r\n      >\r\n        {Names.map((name, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <Title level={4}> {name}</Title>\r\n            </div>\r\n          );\r\n        })}\r\n      </QueueAnim>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  DatePicker,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n  Rate,\r\n  Typography,\r\n  Space,\r\n  Divider,\r\n  Empty\r\n} from \"antd\";\r\nimport \"./App.less\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport {\r\n  UploadOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nexport default function Audio() {\r\n  return (\r\n    <>\r\n        <Empty style={{marginTop:'25%'}}/>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Select,\r\n  Typography,\r\n  Divider,\r\n  Layout,\r\n  Menu,\r\n} from \"antd\";\r\nimport \"./App.less\";\r\nimport { AmazonOutlined, AudioOutlined, UserOutlined,QuestionOutlined } from \"@ant-design/icons\";\r\nimport AboutUs from \"./AboutUs\";\r\nimport Help from \"./Help\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nexport default function App() {\r\n  const [current, setCurrent] = useState(\"awslex\");\r\n\r\n  const handleClick = (e) => {\r\n    setCurrent(e.key);\r\n  };\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <Sider\r\n          breakpoint=\"lg\"\r\n          collapsedWidth=\"0\"\r\n          width=\"300\"\r\n          style={{ background: \"#fff\" }}\r\n        >\r\n          <Menu\r\n            theme=\"light\"\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={[\"awslex\"]}\r\n            style={{ padding: \"5%\", height: \"100%\" }}\r\n            onClick={handleClick}\r\n          >\r\n            <div className=\"logo\">\r\n              <img src=\"https://www.bp.com/apps/settings/wcm/designs/refresh/bp/images/navigation/bp-logo.svg\" />\r\n            </div>\r\n            <Divider />\r\n            <Menu.Item key=\"awslex\" icon={<AmazonOutlined />}>\r\n              AWS Lex Bot\r\n            </Menu.Item>\r\n            <Menu.Item key=\"aboutus\" icon={<UserOutlined />}>\r\n              About Us\r\n            </Menu.Item>\r\n            <Menu.Item key=\"help\" icon={<QuestionOutlined />}>\r\n              Help\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout style={{height:'100vh'}}>\r\n          <Content style={{ background: \"#fff\" }}>\r\n            {current === \"awslex\" ? (\r\n              <iframe\r\n                frameBorder=\"0\"\r\n                src=\"http://localhost:8000/\"\r\n                allow=\"camera;microphone\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            ) : current === 'help' ?(\r\n              <Help />\r\n            ):(<AboutUs />)}\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\", minHeight: \"100px\" }}>\r\n            <h3>bp p.l.c.</h3> Â©2021 The Bestest Microsoft Edgies\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    </>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}