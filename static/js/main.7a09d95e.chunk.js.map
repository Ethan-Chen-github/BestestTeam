{"version":3,"sources":["AboutUs.js","DownloadServiceHistory.js","Help.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","AboutUs","style","display","justifyContent","alignContent","delay","map","name","index","key","fontSize","downloadFile","window","location","href","DownloadServiceHistory","verticalAlign","height","textAlign","marginLeft","marginRight","type","shape","icon","DownloadOutlined","size","onClick","width","marginTop","Utterances","Layout","Header","Content","Footer","Sider","Commands","AddNote","getNote","addServiceHistory","readSection","findKeyword","getSensorData","Select","Option","Audio","margin","App","useState","current","setCurrent","breakpoint","collapsedWidth","background","theme","mode","defaultSelectedKeys","padding","e","className","src","Item","AmazonOutlined","UserOutlined","QuestionOutlined","overflow","frameBorder","allow","minHeight","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a09d95e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, Divider } from \"antd\";\r\nimport \"./App.less\";\r\nimport QueueAnim from \"rc-queue-anim\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function AboutUs() {\r\n  const Names = [\r\n    \"Koehne, Christopher\",\r\n    \"Razzaq, Bassam\",\r\n    \"Perille, Daniel\",\r\n    \"Shieh, John\",\r\n    \"Roberts, Armisha\",\r\n    \"Templeton, Sabrina\",\r\n    \"Reddygari, Praneeth\",\r\n    \"Nawab, John\",\r\n    \"Momin, Sarosha\",\r\n    \"Quadri, Isra\",\r\n    \"Joshi, Ian\",\r\n    \"Ivy, Aidan\",\r\n    \"DeLouise, Alyssa\",\r\n    \"Chen, Ethan\",\r\n    \"Getmanchuk, Alice\",\r\n    \"Dutt, Nikhil\",\r\n  ];\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n      }}\r\n    >\r\n      <br />\r\n      <Title>The Bestest Microsoft Edgies</Title>\r\n      <Divider />\r\n      <QueueAnim\r\n        delay={300}\r\n        style={{\r\n          display: \"grid\",\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n        }}\r\n      >\r\n        {Names.map((name, index) => {\r\n          return (\r\n            <span key={index} style={{ fontSize: 18 }}>\r\n              {name}\r\n            </span>\r\n          );\r\n        })}\r\n      </QueueAnim>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { DownloadOutlined } from \"@ant-design/icons\";\r\nimport \"./App.less\";\r\n\r\nconst downloadFile = () => {\r\n  window.location.href =\r\n    \"https://servicehistorybucket.s3.amazonaws.com/service_history_notes.csv\";\r\n};\r\n\r\nconst DownloadServiceHistory = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n        verticalAlign: \"middle\",\r\n        height: \"100%\",\r\n        // width: \"100%\",\r\n        textAlign: \"center\",\r\n        marginLeft: \"12.5%\",\r\n        marginRight: \"12.5%\",\r\n      }}\r\n    >\r\n      Service History is a way to store observations about a particular Wind\r\n      Turbine. The format of this download will be a CSV File. Inside the CSV,\r\n      there is the turbine number, date of the observation, and the observation\r\n      itself.\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"round\"\r\n        icon={<DownloadOutlined />}\r\n        size=\"large\"\r\n        onClick={downloadFile}\r\n        style={{\r\n          width: \"50%\",\r\n          marginLeft: \"25%\",\r\n          marginTop: \"5%\",\r\n          marginRight: \"25%\",\r\n        }}\r\n      >\r\n        Download\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DownloadServiceHistory;\r\n","import React from \"react\";\r\nimport {\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  DatePicker,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n  Rate,\r\n  Typography,\r\n  Space,\r\n  Divider,\r\n  Empty\r\n} from \"antd\";\r\nimport \"./App.less\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport {\r\n  UploadOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst Utterances = [\r\n  \"- help\",\r\n  \"- menu\",\r\n  \"- open menu\",\r\n  \"- what can you do\",\r\n  \"- how can you help me\",\r\n  \"- tell me what you can do\"\r\n];\r\n\r\nconst Commands = [\r\n  \"- what is 'command'\",\r\n  \"- what does 'command' do\",\r\n  \"- what do you know about 'command'\",\r\n  \"- help with 'command'\",\r\n  \"- more info on 'command'\",\r\n  \"- tell me more about 'command'\",\r\n  \"- I want to know about 'command'\"\r\n];\r\n\r\nconst AddNote = [\r\n  \"- I'd like to record a note\",\r\n  \"- take a note for ​`{topic}​`\",\r\n  \"- take a note and tag it to `​{topic}​`\",\r\n  \"- take a note for ​`{machineID}​` for me tagged to `​{topic}​`\",\r\n  \"- Can you take a note for ​`{machineID}​` for me\"\r\n];\r\n\r\nconst getNote = [\r\n  \"- access a note for ​`{topic}`​ by ​`{name}​` for turbine `​{machineID}​` on ​`{date}`\",\r\n  \"- get a note for ​`{topic}`​ on machine `​{machineID}​` by `​{name}`​ taken on ​`{date}​`\",\r\n  \"- I need a note by `​{name}`\",\r\n  \"- access a note taken on ​`{date}​` for ​`{machineID}`\",\r\n  \"- get a note for me\"\r\n];\r\n\r\nconst addServiceHistory = [\r\n  \"- `action` (get/add) service history\",\r\n  \"- `action` service history for `turbine_number`\",\r\n  \"- `action` service history for turbine `turbine_number` on `date`\",\r\n  \"- `action` service history for `date`\"\r\n];\r\n\r\nconst readSection = [\r\n  \"- Read section `{section}` dot `{subsection}`* dot `{subsubsection}`\",\r\n  \"- Search section `{section}` dot `{subsection}`* dot `{subsubsection}`* for `{keywordString}\",\r\n  \"- Read what section `{section}` dot `{subsection}`* dot `{subsubsection}`\"\r\n];\r\n\r\nconst findKeyword = [\r\n  \"-Does the manual mention `{keywordString}`?\",\r\n  \"- Search the manual for `{keywordString}`\",\r\n  \"- Which sections contain the keyword `{keywordString}`?\"\r\n];\r\n\r\nconst getSensorData = [\r\n  \"- I need data from `{date}` at `{time}`\",\r\n  \"- What was the `{aggregation}` `{dataType}` for turbine `{machineID}` on `{date}\",\r\n  \"- Get `{dataType}` data from `{date}` at `{time}`\",\r\n  \"- Get sensor data for `{machineID}`\"\r\n];\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nexport default function Audio() {\r\n  return (\r\n    <div style={{ margin: 30 }}>\r\n      <h1>Intents</h1>\r\n      Wendy can be broken up into several intents that each serve specific\r\n      purpose. These intents are detailed below. Some things to know:\r\n      <p>\r\n        - Each intent can be called be speaking a range of \"**utterances**\".\r\n        These utterances are initially hardcoded in, but Wendy should learn new\r\n        utterances that have similar meanings (for example, \"get a note\" and\r\n        \"add a note\", and \"please add a note\" will be recognized as the same\r\n        things).\r\n      </p>\r\n      <p>\r\n        - Each intent also may have \"**slots**\" that it wants to fill. These\r\n        slots represent variables that can take on a specific range of values\r\n        that are used in the processing of the intent (for example, a slot\r\n        called \"animal\" would detect if an animal is spoken and store it for use\r\n        later).\r\n      </p>\r\n      <h1>Intro</h1>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {Utterances.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>\r\n        After the utterance, Wendy spits out list of commands. If the user says\r\n        hi, Wendy will introduce herself and then give the list of commands.\r\n      </h1>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {Commands.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>Add Note</h1>\r\n      <p>\r\n        Add Note is used to add a note (transcribed as text) to a shared\r\n        database.\r\n      </p>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {AddNote.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>Get Note</h1>\r\n      <p>Get Note is used to pull a note from a shared database.</p>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {getNote.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>Add/Get Service History</h1>\r\n      <p>\r\n        The Add Service History intent is used to add/retrieve a service history\r\n        description (transcribed as text) to/from a database and CSV file.\r\n      </p>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {addServiceHistory.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>Read Section</h1>\r\n      <p>\r\n        This intent is used to read part or all of a given section in a manual.\r\n      </p>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {readSection.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>Find Keyword</h1>\r\n      <p>\r\n        This intent is used to find the sections of a manual that contain a\r\n        keyword string.\r\n      </p>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {findKeyword.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n      <h1>Get Sensor Data</h1>\r\n      <p>\r\n        Get Sensor Data is used to pull data from a static csv file populated\r\n        with dummy data, which is an hourly time series for the year 2021.\r\n      </p>\r\n      <p>\r\n        Example Utterances:{\" \"}\r\n        {getSensorData.map((name, index) => {\r\n          return (\r\n            <div key={index} style={{ fontSize: 14 }}>\r\n              {name}\r\n            </div>\r\n          );\r\n        })}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Select, Typography, Divider, Layout, Menu } from \"antd\";\r\nimport \"./App.less\";\r\nimport {\r\n  AmazonOutlined,\r\n  AudioOutlined,\r\n  UserOutlined,\r\n  QuestionOutlined,\r\n  DownloadOutlined\r\n} from \"@ant-design/icons\";\r\nimport AboutUs from \"./AboutUs\";\r\nimport DownloadServiceHistory from \"./DownloadServiceHistory\";\r\nimport Help from \"./Help\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nexport default function App() {\r\n  const [current, setCurrent] = useState(\"awslex\");\r\n\r\n  const handleClick = (e) => {\r\n    setCurrent(e.key);\r\n  };\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <Sider\r\n          breakpoint=\"lg\"\r\n          collapsedWidth=\"0\"\r\n          width=\"300\"\r\n          style={{ background: \"#fff\" }}\r\n        >\r\n          <Menu\r\n            theme=\"light\"\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={[\"awslex\"]}\r\n            style={{ padding: \"5%\", height: \"100%\" }}\r\n            onClick={handleClick}\r\n          >\r\n            <div className=\"logo\">\r\n              <img src=\"https://www.bp.com/apps/settings/wcm/designs/refresh/bp/images/navigation/bp-logo.svg\" />\r\n            </div>\r\n            <Divider />\r\n            <Menu.Item key=\"awslex\" icon={<AmazonOutlined />}>\r\n              AWS Lex Bot\r\n            </Menu.Item>\r\n            <Menu.Item key=\"Download\" icon={<DownloadOutlined />}>\r\n              Download Service History\r\n            </Menu.Item>\r\n            <Menu.Item key=\"aboutus\" icon={<UserOutlined />}>\r\n              About Us\r\n            </Menu.Item>\r\n            <Menu.Item key=\"help\" icon={<QuestionOutlined />}>\r\n              Help\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout style={{ height: \"100vh\" }}>\r\n          <Content style={{ background: \"#fff\", overflow: \"auto\" }}>\r\n            {current === \"awslex\" ? (\r\n              <iframe\r\n                frameBorder=\"0\"\r\n                src=\"http://localhost:8000/\"\r\n                allow=\"camera;microphone\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            ) : current === \"help\" ? (\r\n              <Help />\r\n            ) : current === \"aboutus\" ? (\r\n              <AboutUs />\r\n            ) : (\r\n              <DownloadServiceHistory />\r\n            )}\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\", minHeight: \"100px\" }}>\r\n            <h3>bp p.l.c.</h3> ©2021 The Bestest Microsoft Edgies\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    </>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}