{"version":3,"sources":["bp.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","record","setRecord","file","setFile","isModalVisible","setIsModalVisible","Header","Layout","Footer","Sider","Content","useEffect","className","id","src","logo","alt","onStop","recordedBlob","blobURL","onData","console","log","strokeColor","backgroundColor","shape","icon","AudioTwoTone","size","onMouseDown","onMouseUp","href","title","visible","onOk","onCancel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,MAA0B,+B,gECQ1B,SAASA,IAAO,IAAD,EACAC,oBAAS,GADT,mBACrBC,EADqB,KACbC,EADa,OAEJF,mBAAS,WAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGgBJ,oBAAS,GAHzB,mBAGrBK,EAHqB,KAGLC,EAHK,KAKpBC,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,OAA2BD,IAAnBE,MAAmBF,IAAZG,QAiC/B,OAnBAC,qBAAU,cAAU,IAoBlB,sBAAKC,UAAU,MAAf,UACE,cAACN,EAAD,CAAQM,UAAU,SAAlB,SACE,oBAAIC,GAAG,aAAP,kCAGF,qBAAKC,IAAKC,EAAMH,UAAU,WAAWI,IAAI,SAEzC,cAAC,IAAD,IAEA,gEAEA,cAAC,WAAD,CACEhB,OAAQA,EACRY,UAAU,aACVK,OApBN,SAAgBC,GACdf,EAAQe,EAAaC,SACrBd,GAAkB,IAmBde,OAzBN,SAAgBF,GACdG,QAAQC,IAAI,+BAAgCJ,IAyBxCK,YAAY,QACZC,gBAAgB,UAGlB,uBAEA,cAAC,IAAD,CACEC,MAAM,SACNC,KAAM,cAACC,EAAA,EAAD,IACNC,KAAK,QACLC,YA5CN,WACE5B,GAAU,IA4CN6B,UAzCN,WACE7B,GAAU,MA2CR,uBACA,uBAEA,wDACA,mBAAG8B,KAAM7B,EAAT,SAAgBA,IAGhB,cAAC,IAAD,IACA,cAACM,EAAD,iCAIA,eAAC,IAAD,CAAOwB,MAAM,gBAAgBC,QAAS7B,EAAgB8B,KA1EzC,WACf7B,GAAkB,IAyEsD8B,SAtErD,WACnB9B,GAAkB,IAqEhB,UACE,8CACA,wBAAQS,IAAKZ,UC3FrB,IAYekC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6111016a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bp.2d68a791.png\";","import logo from \"./bp.png\";\r\nimport \"./App.css\";\r\nimport { React } from \"react\";\r\nimport { ReactMic } from \"react-mic\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Divider, Button, Layout, Modal } from \"antd\";\r\nimport { AudioTwoTone } from \"@ant-design/icons\";\r\n\r\nexport default function App() {\r\n  const [record, setRecord] = useState(false);\r\n  const [file, setFile] = useState(\"waiting\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const { Header, Footer, Sider, Content } = Layout;\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  function startRecording() {\r\n    setRecord(true);\r\n  }\r\n\r\n  function stopRecording() {\r\n    setRecord(false);\r\n  }\r\n\r\n  function onData(recordedBlob) {\r\n    console.log(\"chunk of real-time data is: \", recordedBlob);\r\n  }\r\n\r\n  function onStop(recordedBlob) {\r\n    setFile(recordedBlob.blobURL);\r\n    setIsModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header className=\"header\">\r\n        <h2 id=\"headerText\">BP Voice Interface</h2>\r\n      </Header>\r\n\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n      <Divider />\r\n\r\n      <h2>Press Button for Voice Command</h2>\r\n\r\n      <ReactMic\r\n        record={record}\r\n        className=\"sound-wave\"\r\n        onStop={onStop}\r\n        onData={onData}\r\n        strokeColor=\"green\"\r\n        backgroundColor=\"white\"\r\n      />\r\n\r\n      <br />\r\n\r\n      <Button\r\n        shape=\"circle\"\r\n        icon={<AudioTwoTone />}\r\n        size=\"large\"\r\n        onMouseDown={startRecording}\r\n        onMouseUp={stopRecording}\r\n      />\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <span>link to voice file: </span>\r\n      <a href={file}>{file}</a>\r\n\r\n\r\n      <Divider />\r\n      <Footer>@2021 Bestest Team</Footer>\r\n\r\n\r\n\r\n      <Modal title=\"Voice Command\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n        <p>Audio Command</p>\r\n        <iframe src={file} />\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}